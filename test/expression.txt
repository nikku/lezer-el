# Expressions

${1}
#{1}
${'hello'}
${"hello"}
${book}
${customer.name}
${func(a, b)(c)}
${employee.getName()}
${exprA.identifierB}
${exprA["identifierB"]}
${exprA["identifierB"]()}

==>

Script("$","{",ExpressionStatement(Number),"}","#","{",ExpressionStatement(Number),"}","$","{",ExpressionStatement(String),"}","$","{",ExpressionStatement(String),"}","$","{",ExpressionStatement(VariableName),"}","$","{",ExpressionStatement(MemberExpression(VariableName,".",PropertyName)),"}","$","{",ExpressionStatement(CallExpression(CallExpression(VariableName,ArgList("(",VariableName,",",VariableName,")")),ArgList("(",VariableName,")"))),"}","$","{",ExpressionStatement(CallExpression(MemberExpression(VariableName,".",PropertyName),ArgList("(",")"))),"}","$","{",ExpressionStatement(MemberExpression(VariableName,".",PropertyName)),"}","$","{",ExpressionStatement(MemberExpression(VariableName,"[",String,"]")),"}","$","{",ExpressionStatement(CallExpression(MemberExpression(VariableName,"[",String,"]"),ArgList("(",")"))),"}")


# Arithmetic Operators

${a+b}
${a-b}
${a*b}
${a/b}
${a div b}
${a%b}
${a mod b}
${-a}

==>

Script("$","{",ExpressionStatement(BinaryExpression(VariableName,ArithOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,ArithOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,ArithOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,ArithOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,ArithOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,ArithOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,ArithOp,VariableName)),"}","$","{",ExpressionStatement(UnaryExpression(ArithOp,VariableName)),"}")


# String Concatenation Operator

${a+=b}

==>

Script("$","{",ExpressionStatement(BinaryExpression(VariableName,ArithOp,VariableName)),"}")


# Relational Operators

${a==b}
${a eq b}
${a!=b}
${a ne b}
${a<b}
${a lt b}
${a>b}
${a gt b}
${a<=b}
${a le b}
${a>=b}
${a ge b}

==>

Script("$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,CompareOp,VariableName)),"}")


# Logical Operators

${a&&b}
${a and b}
${a||b}
${a or b}
${!a}

==>

Script("$","{",ExpressionStatement(BinaryExpression(VariableName,LogicOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,LogicOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,LogicOp,VariableName)),"}","$","{",ExpressionStatement(BinaryExpression(VariableName,LogicOp,VariableName)),"}","$","{",ExpressionStatement(UnaryExpression(LogicOp,VariableName)),"}")


# Empty Operator

${ empty a }

==>

Script("$","{",ExpressionStatement(EmptyExpression(empty,VariableName)),"}")


# Conditional Operator

${ a ? b : c }

==>

Script("$","{",ExpressionStatement(ConditionalExpression(VariableName,LogicOp,VariableName,LogicOp,VariableName)),"}")


# Assignment Operator

${ a = b }

==>

Script("$","{",ExpressionStatement(AssignmentExpression(VariableName,Equals,VariableName)),"}")


# Semicolon Operator

${ a; b }

==>

Script("$","{",ExpressionStatement(VariableName),";",ExpressionStatement(VariableName),"}")


# Parentheses

${(a*(b+c))}

==>

Script("$","{",ExpressionStatement(ParenthesizedExpression("(",BinaryExpression(VariableName,ArithOp,ParenthesizedExpression("(",BinaryExpression(VariableName,ArithOp,VariableName),")")),")")),"}")


# Functions

${foo()}
${foo(a, b)}

==>

Script("$","{",ExpressionStatement(CallExpression(VariableName,ArgList("(",")"))),"}","$","{",ExpressionStatement(CallExpression(VariableName,ArgList("(",VariableName,",",VariableName,")"))),"}")


# Lambda Expressions


${x->x+1}
${x-> (a=x)}
${x-> c?x+1:x+2}

${()->64}
${(x,y)->x+y}
${((x,y)->x+y)(3,4)}

${v = x->x+1}

${a -> { b = a + 1; b - 10 }}

==>

Script("$","{",ExpressionStatement(ArrowFunction(ParamList(VariableDefinition),Arrow,BinaryExpression(VariableName,ArithOp,Number))),"}","$","{",ExpressionStatement(ArrowFunction(ParamList(VariableDefinition),Arrow,ParenthesizedExpression("(",AssignmentExpression(VariableName,Equals,VariableName),")"))),"}","$","{",ExpressionStatement(ArrowFunction(ParamList(VariableDefinition),Arrow,ConditionalExpression(VariableName,LogicOp,BinaryExpression(VariableName,ArithOp,Number),LogicOp,BinaryExpression(VariableName,ArithOp,Number)))),"}","$","{",ExpressionStatement(ArrowFunction(ParamList("(",")"),Arrow,Number)),"}","$","{",ExpressionStatement(ArrowFunction(ParamList("(",VariableDefinition,",",VariableDefinition,")"),Arrow,BinaryExpression(VariableName,ArithOp,VariableName))),"}","$","{",ExpressionStatement(CallExpression(ParenthesizedExpression("(",ArrowFunction(ParamList("(",VariableDefinition,",",VariableDefinition,")"),Arrow,BinaryExpression(VariableName,ArithOp,VariableName)),")"),ArgList("(",Number,",",Number,")"))),"}","$","{",ExpressionStatement(AssignmentExpression(VariableName,Equals,ArrowFunction(ParamList(VariableDefinition),Arrow,BinaryExpression(VariableName,ArithOp,Number)))),"}","$","{",ExpressionStatement(ArrowFunction(ParamList(VariableDefinition),Arrow,Block("{",ExpressionStatement(AssignmentExpression(VariableName,Equals,BinaryExpression(VariableName,ArithOp,Number))),";",ExpressionStatement(BinaryExpression(VariableName,ArithOp,Number)),"}"))),"}")


# Sets

${{a, 1, b}}

==>

Script("$","{",ExpressionStatement(SetExpression("{",SequenceExpression(VariableName,",",Number,",",VariableName),"}")),"}")


# Lists

${[]}
${[a, 1, b]}


==>

Script("$","{",ExpressionStatement(ArrayExpression("[","]")),"}","$","{",ExpressionStatement(ArrayExpression("[",SequenceExpression(VariableName,",",Number,",",VariableName),"]")),"}")


# Maps

${{}}
${{ "a": 1, b: b }}
${{"one":1, "two":2, "three":3}}


==>

Script("$","{",ExpressionStatement(ObjectExpression("{","}")),"}","$","{",ExpressionStatement(ObjectExpression("{",Property(String,":",Number),",",Property(PropertyNameDefinition,":",VariableName),"}")),"}","$","{",ExpressionStatement(ObjectExpression("{",Property(String,":",Number),",",Property(String,":",Number),",",Property(String,":",Number),"}")),"}")


# Scripts

12 12 true falseasdfalse 12ta ${a}
${fact = n -> n==0? 1: n*fact(n-1); fact(5)}
${employees.where(e->e.firstName == 'Bob')}
${customers.select(c->[c.name, c.orders.sum(o->o.total)])}
${books.stream().filter(b->b.category == 'history')
 .map(b->b.title)
 .toList()}


==>

Script(Number,Number,BooleanLiteral,Text,Number,Text,"$","{",ExpressionStatement(VariableName),"}","$","{",ExpressionStatement(AssignmentExpression(VariableName,Equals,ArrowFunction(ParamList(VariableDefinition),Arrow,ConditionalExpression(BinaryExpression(VariableName,CompareOp,Number),LogicOp,Number,LogicOp,BinaryExpression(VariableName,ArithOp,CallExpression(VariableName,ArgList("(",BinaryExpression(VariableName,ArithOp,Number),")"))))))),";",ExpressionStatement(CallExpression(VariableName,ArgList("(",Number,")"))),"}","$","{",ExpressionStatement(CallExpression(MemberExpression(VariableName,".",PropertyName),ArgList("(",ArrowFunction(ParamList(VariableDefinition),Arrow,BinaryExpression(MemberExpression(VariableName,".",PropertyName),CompareOp,String)),")"))),"}","$","{",ExpressionStatement(CallExpression(MemberExpression(VariableName,".",PropertyName),ArgList("(",ArrowFunction(ParamList(VariableDefinition),Arrow,ArrayExpression("[",SequenceExpression(MemberExpression(VariableName,".",PropertyName),",",CallExpression(MemberExpression(MemberExpression(VariableName,".",PropertyName),".",PropertyName),ArgList("(",ArrowFunction(ParamList(VariableDefinition),Arrow,MemberExpression(VariableName,".",PropertyName)),")"))),"]")),")"))),"}","$","{",ExpressionStatement(CallExpression(MemberExpression(CallExpression(MemberExpression(CallExpression(MemberExpression(CallExpression(MemberExpression(VariableName,".",PropertyName),ArgList("(",")")),".",PropertyName),ArgList("(",ArrowFunction(ParamList(VariableDefinition),Arrow,BinaryExpression(MemberExpression(VariableName,".",PropertyName),CompareOp,String)),")")),".",PropertyName),ArgList("(",ArrowFunction(ParamList(VariableDefinition),Arrow,MemberExpression(VariableName,".",PropertyName)),")")),".",PropertyName),ArgList("(",")"))),"}")


# Literals

true
false
null
1
-10

==>

Script(BooleanLiteral,BooleanLiteral,null,Number,Number)
